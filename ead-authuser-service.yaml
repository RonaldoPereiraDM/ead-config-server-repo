server:
    port: 8087
    servlet:
        context-path: '/ead-authuser/'

spring:
    application:
      name: ead-authuser-service
    datasource:
        url: jdbc:postgresql://localhost:5434/ead-authuser-v2
        username: ronaldo
        password: ronaldo
    sql:
        init:
            mode: always
    jpa:
        show-sql: true
        hibernate:
            ddl-auto: none  # Importante: previne o Hibernate de tentar criar as tabelas
        properties:
            hibernate:
                default_schema: ead-authuser-v2
                dialect: org.hibernate.dialect.PostgreSQLDialect
                jdbc:
                    lob:
                        non-contextual-creation: true
    output:
        ansi:
            enabled: Always # Habilita cores ANSI no console sempre
    rabbitmq:
        host: localhost
        port: 5672
        username: guest
        password: guest
    flyway:
        #Essa propriedade serve para ativarmos o Flyway
        enabled: true
        locations: classpath:db/migration

        #Essa propriedade para criar uma tabela com as migrações e assim ter acesso ao histórico de modificações.
        baseline-on-migrate: true
        user: ronaldo
        password: ronaldo

        # Valida se as migrações aplicadas no banco correspondem aos arquivos de migração
        # Ajuda a detectar mudanças não autorizadas nas migrações já executadas
        validate-on-migrate: true

        # Permite o uso do comando Flyway clean (que limpa todas as tabelas)
        # CUIDADO: Em produção, isso deveria ser true para evitar deleção acidental dos dados
        clean-disabled: false

        # Permite que o Flyway crie os schemas se eles não existirem
        # Útil durante o desenvolvimento, mas considere false em produção
        create-schemas: false

        # Schema padrão onde o Flyway irá criar sua tabela de histórico e executar migrações
        # Deve corresponder ao schema principal da sua aplicação
        default-schema: ead-authuser-v2

ead:
    api:
        url:
            course: 'http://ead-course-service/ead-course'
    broker:
        exchange:
            userEvent: ead.userevent

authuser:
    refreshscope:
        name: Ronaldo Melo UPDATE!!!!!!

# Configuração do Spring Actuator e Refresh Scope
management:
 endpoints:
   web:
     exposure:
       # Lista de endpoints expostos via web
       include:  
         # Endpoint para atualizar propriedades em runtime
         # Usado com @RefreshScope para recarregar beans sem restart
         # Endpoint: POST /actuator/refresh
         - refresh

         # Endpoint que retorna status da aplicação
         # Endpoint: GET /actuator/health  
         - health

logging:
    level:
        com.ead: TRACE # Logs mais detalhados para seu pacote específico
        root:  # Nível padrão para todos os logs não especificados
        org.springframework.web: DEBUG # Logs detalhados das requisições web
        org.hibernate: INFO  # Logs padrão do Hibernate
        org.flywaydb: DEBUG
        org.postgresql: DEBUG

resilience4j:
    circuitbreaker:
        instances:
            # Nome da instância do Circuit Breaker
            circuitbreakerInstance:
                # Define o tamanho da janela deslizante que será usada para
                # registrar as chamadas. Neste caso, são 30 unidades de tempo
                sliding-window-size: 30

                # Número máximo de chamadas permitidas quando o circuito está
                # no estado HALF-OPEN (semi-aberto). Após 2 chamadas bem-sucedidas,
                # o circuito volta ao estado CLOSED (fechado)
                permitted-number-of-calls-in-half-open-state: 2

                # Tipo da janela deslizante: TIME_BASED significa que a janela
                # é baseada em tempo (também poderia ser COUNT_BASED para contagem de requisições)
                sliding-window-type: TIME_BASED

                # Número mínimo de chamadas necessárias antes que o Circuit Breaker
                # possa calcular a taxa de erro. Neste caso, precisamos de pelo menos
                # 2 chamadas para começar a análise
                minimum-number-of-calls: 2

                # Tempo que o Circuit Breaker permanecerá no estado OPEN (aberto)
                # antes de tentar mudar para HALF-OPEN. Neste caso, 15 segundos
                wait-duration-in-open-state:
                    seconds: 15

                # Porcentagem de falhas permitidas antes de abrir o circuito
                # Se 80% das requisições falharem dentro da janela deslizante,
                # o circuito abrirá (estado OPEN)
                failure-rate-threshold: 80
    retry:
        instances:
            retryInstance:
                maxAttempts: 3
                waitDuration: 5s

openapi:
    api:
        info:
            title: EAD Authuser
            description: API responsável por trazer dados de usuários e realizar operações sobre usuário.
            contact:
                name: Ronaldo Melo
                url: https://ronaldomelo.com.br
                email: ronaldo.pereira.dm@gmail.com
        url:
            base: localhost:${server.port}

springdoc:
    api-docs:
        enabled: true
        path: /api-docs
    swagger-ui:
        path: /swagger-ui.html
        operationsSorter: method
        tagsSorter: alpha